package co.blocke.dottyjack

import co.blocke.dotty_reflection._
import co.blocke.dotty_reflection.info._
import org.apache.commons.codec.binary.Base64

import scala.collection.mutable
import scala.jdk.CollectionConverters._
import co.blocke.dottyjack.json.JSON

case class Foom(a: Int)
trait Basis[T] {
  val a: Int
  val b: String
  val c: T
}

case class Thingy[T]( a: Int, b: String, c: T) extends Basis[T]



object Main {

  def main(args: Array[String]): Unit = 

    // val sj = DottyJack()
    val sj = co.blocke.dottyjack.DottyJack()

    val js = """{"_hint":"co.blocke.dottyjack.Thingy","a":15,"b":"Wow","c":[true,false]}""".asInstanceOf[JSON]

    println(sj.read[Basis[List[Boolean]]](js))

    // val now = System.currentTimeMillis()
    // sj.read[Basis[Boolean]](js)
    // val later = System.currentTimeMillis()
    // sj.read[Basis[Boolean]](js)
    // val later2 = System.currentTimeMillis()
    // println(later-now)
    // println(later2-later)

    // val typeEntries = new java.util.concurrent.ConcurrentHashMap[RType, String]

    // val t1 = RType.of[Foom]
    // val t2 = RType.of[Foom]

    // typeEntries.put(t1, "zhere")
    // println(typeEntries.get(t1))
    // typeEntries.put(t2, "zthere")
    // println(typeEntries.get(t1))
    // println(typeEntries.get(t2))

    // println(t1 == t2)
    // println(t1.equals)



  def constructors(clazz: Class[_]): String = 
    s"=== Constructors: ${clazz.getName} ===\n   " + clazz.getConstructors.toList.mkString("\n   ")
  def methods(clazz: Class[_]): String = 
    s"=== Methods: ${clazz.getName} ===\n   " + clazz.getMethods.toList.mkString("\n   ")
  def fields(clazz: Class[_]): String = 
    s"=== Fields: ${clazz.getName} ===\n   " + clazz.getFields.toList.mkString("\n   ")
  def stack(clazz: Class[_]): String = 
    s"=== Superclass: ${clazz.getName} ===\n   " + clazz.getSuperclass() + "\n" +
    s"=== Interfaces: ${clazz.getName} ===\n   " + clazz.getInterfaces.toList.mkString("\n   ")
  
}